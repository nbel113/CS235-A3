import osfrom flask import Blueprint, render_template, request, redirect, url_forfrom flask_wtf import FlaskFormfrom wtforms import Form, StringField, SelectField, SubmitFieldimport movie_web_app.a_adapters.repository as repoimport mathsearch_blueprint = Blueprint(    'search_bp', __name__)@search_blueprint.route('/search', methods=['GET', 'POST'])def search():    error_list = []    repo_inst = repo.repo_instance    search_form = SearchForm(request.form)    if request.method == 'POST':        title_search = search_form.title_search.data        director_search = search_form.director_search.data        actors_search = search_form.actors_search.data        genres_search = search_form.genres_search.data        search = Search(title_search, director_search, actors_search, genres_search, repo_inst)        args = search.get_results()        if len(args) == 0:            #print('1. No results found!')            error_list.append('No results found!')  # sfsddfdf            #return redirect('/search')            return render_template(                'search/search.html',                form=search_form,                error_list=error_list,            )        intersection_list = search.get_intersection_list(args)        if len(intersection_list) == 0:            #print('2. No results found!')            error_list.append('No results found!')            #return redirect('/search')            return render_template(                'search/search.html',                form=search_form,                error_list=error_list,            )        return redirect(url_for('search_bp.results',                                title_search=title_search,                                director_search=director_search,                                actors_search=actors_search,                                genres_search=genres_search,                                page_num=1))    return render_template(        'search/search.html',        form=search_form,        error_list=error_list,    )@search_blueprint.route('/results', methods=['GET'])def results():    repo_inst = repo.repo_instance    movies_per_page = 15    # Read query parameters.    page_num = request.args.get('page_num')    title_search = request.args.get('title_search')    director_search = request.args.get('director_search')    actors_search = request.args.get('actors_search')    genres_search = request.args.get('genres_search')    search = Search(title_search, director_search, actors_search, genres_search, repo_inst)    args = search.get_results()    if page_num is None:        # No page_num query parameter, so initialise page_num to start at the beginning.        page_num = 1    else:        # Convert page_num from string to int.        page_num = int(page_num)    intersection_list = search.get_intersection_list(args)    last_page = math.ceil(len(intersection_list) / movies_per_page)    if (page_num <= 0 or page_num > last_page):        return redirect(url_for('search_bp.results',                                title_search=title_search,                                director_search=director_search,                                actors_search=actors_search,                                genres_search=genres_search,                                page_num=1))    first_page_url = None    prev_page_url = None    next_page_url = None    last_page_url = None    page_total = (page_num - 1) * movies_per_page    listing = intersection_list[page_total:page_total + movies_per_page]    repo_used = None    for i in listing:        try:  # if using database            director_full_name = repo.repo_instance.get_movie_director_full_name(i.directorID)            i.director = director_full_name            actor_list = repo.repo_instance.get_movie_actors(i.movieID)            i.actor_list = actor_list            genre_list = repo.repo_instance.get_movie_genres(i.movieID)            i.genre_list = genre_list            repo_used = "database"        except AttributeError:  # if using memory            repo_used = "memory"            break    if page_num > 1:        prev_page_url = url_for('search_bp.results',                                title_search=title_search,                                director_search=director_search,                                actors_search=actors_search,                                genres_search=genres_search,                                page_num=page_num - 1)        first_page_url = url_for('search_bp.results',                                 title_search=title_search,                                 director_search=director_search,                                 actors_search=actors_search,                                 genres_search=genres_search,                                 page_num=1)    if (page_num * movies_per_page) < len(intersection_list):        next_page_url = url_for('search_bp.results',                                title_search=title_search,                                director_search=director_search,                                actors_search=actors_search,                                genres_search=genres_search,                                page_num=page_num + 1)        last_page_url = url_for('search_bp.results',                                title_search=title_search,                                director_search=director_search,                                actors_search=actors_search,                                genres_search=genres_search,                                page_num=last_page)    # display results    return render_template(        'search/results.html',        page_num=page_num,        last_page=last_page,        listing=listing,        repo_used=repo_used,        page_total=page_total,        movies_per_page=movies_per_page,        movie_list_length=len(intersection_list),        search_url=url_for('search_bp.search'),        first_page_url=first_page_url,        last_page_url=last_page_url,        next_page_url=next_page_url,        prev_page_url=prev_page_url,    )class Search:    def __init__(self, title_search, director_search, actors_search, genres_search, repo_inst):        self.__title_search = title_search        self.__director_search = director_search        self.__actors_search = actors_search        self.__genres_search = genres_search        self.__repo_inst = repo_inst        self.__args = []        self.__intersection_list = []    def get_results(self):        repo_inst = self.__repo_inst        title_search = self.__title_search        director_search = self.__director_search        actors_search = self.__actors_search        genres_search = self.__genres_search        args = self.__args        title_search_result = repo_inst.get_movies_by_search_title(title_search)        director_search_result = repo_inst.get_movies_by_search_director(director_search)        actors_search_result = repo_inst.get_movies_by_search_actor(actors_search)        genres_search_result = repo_inst.get_movies_by_search_genre(genres_search)        search_results_lists = [            title_search_result,            director_search_result,            actors_search_result,            genres_search_result        ]        for result in range(len(search_results_lists)):            if search_results_lists[result] is not None:                args.append(set(search_results_lists[result]))        return args    def get_intersection_list(self, args):        intersection_set = set.intersection(*args)  # *args means variable number of positional arguments        intersection_list = list(intersection_set)        return intersection_listclass SearchForm(FlaskForm):    title_search = StringField('')    director_search = StringField('')    actors_search = StringField('')    genres_search = StringField('')    submit = SubmitField('Search')